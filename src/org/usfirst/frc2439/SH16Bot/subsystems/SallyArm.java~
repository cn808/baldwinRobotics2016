// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2439.SH16Bot.subsystems;

import org.usfirst.frc2439.SH16Bot.RobotMap;
import org.usfirst.frc2439.SH16Bot.commands.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;

import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class SallyArm extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController upperArmMotor = RobotMap.sallyArmUpperArmMotor;
    private final SpeedController lowerArmMotor = RobotMap.sallyArmLowerArmMotor;
    private final Encoder upperEnc = RobotMap.sallyArmUpperEnc;
    private final Encoder lowerEnc = RobotMap.sallyArmLowerEnc;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
    //// TEAM 2429 Code
    
    /*
     * Notes:
     * Using a VEX VersaPlanetary Integrated Encoder (p/n 217-5046) connected  
     * directly to a CANTalon SRX motor controller you can implement an 
     * 'internal' closed loop.
     * However, orchestrating the forearm, upper arm, and drive train to
     * simultaneously lower bridge and pull away, might best be performed 
     * in code.
     */
    
    public void raiseArm()
    {
    	
    }
    
    public void stowArm()
    {
    
    }
    
    public void lowerDrawbridge()
    {
    
    }
}

