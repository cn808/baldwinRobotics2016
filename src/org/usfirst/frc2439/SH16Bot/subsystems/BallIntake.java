// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2439.SH16Bot.subsystems;

import org.usfirst.frc2439.SH16Bot.RobotMap;
import org.usfirst.frc2439.SH16Bot.commands.*;
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.TalonSRX;

import edu.wpi.first.wpilibj.command.PIDSubsystem;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 *
 */
public class BallIntake extends PIDSubsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController intakeMotor = RobotMap.ballIntakeIntakeMotor;
    private final Encoder intakeEnc = RobotMap.ballIntakeIntakeEnc;
    private final DigitalInput intakeLimitSw = RobotMap.ballIntakeIntakeLimitSw;
    private final AnalogInput intakeArm = RobotMap.ballIntakeIntakeArm;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private static SpeedController rightArmMotor = RobotMap.ballIntakeRightArmMotor;
    private static SpeedController leftArmMotor = RobotMap.ballIntakeLeftArmMotor;
    
    private static double MOTOR_SPEED_INTAKE = -0.6;
    private static double MOTOR_SPEED_EJECT = 0.6;
    private static double ARM_SPEED_UP = +0.4;
    private static double ARM_SPEED_DOWN = -0.4;

    
   
    private final DigitalInput upperLimitSw = RobotMap.ballIntakeUpperLimitSw;
    private final DigitalInput lowerLimitSw = RobotMap.ballIntakeLowerLimitSw;

    // Initialize your subsystem here
    public BallIntake() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
        super("BallIntake", 1.0, 0.0, 0.0);
        setAbsoluteTolerance(0.2);
        getPIDController().setContinuous(false);
        LiveWindow.addActuator("BallIntake", "PIDSubsystem Controller", getPIDController());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID

        // Use these to get going:
        // setSetpoint() -  Sets where the PID controller should move the system
        //                  to
        // enable() - Enables the PID controller.
    }

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }

    protected double returnPIDInput() {
        // Return your input value for the PID loop
        // e.g. a sensor, like a potentiometer:
        // yourPot.getAverageVoltage() / kYourMaxVoltage;

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
        return intakeEnc.pidGet();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
    }

    protected void usePIDOutput(double output) {
        // Use output to drive your system, like a motor
        // e.g. yourMotor.set(output);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
        intakeMotor.pidWrite(output);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
    }
    
    //// TEAM 2439 code
 
    public void printIntakeEncoderValue() {
    	SmartDashboard.putNumber("Arm Enc", RobotMap.ballIntakeArmEnc.get() );
    }
    public boolean isArmUp()
    {
    	return !upperLimitSw.get();
    }
    
    public boolean isArmDown()
    {
    	return !lowerLimitSw.get();
    }
    
    /**
     * Lowers BallIntake arm to low position for going under
     * low bar defense or scoring in low goal
     */
    public void lower()
    {
    	//armMotor.disable();
    	//armMotor.setSetpoint(1090.);
    	//armMotor.enable();
    	rightArmMotor.set( ARM_SPEED_DOWN );
    	leftArmMotor.set( -ARM_SPEED_DOWN );
   }
    
    public void raise()
    {
    	//armMotor.disable();
    	//armMotor.setSetpoint(0.);
    	//armMotor.enable();
    	rightArmMotor.set( ARM_SPEED_UP );
    	leftArmMotor.set( -ARM_SPEED_UP );

   }
    
    public void stopArm()
    {
    	rightArmMotor.set(0.);
    	leftArmMotor.set(0.);

    }
    
    /**
     * Runs intake motor until boulder trips limit switch
     * @return true if limit switch tripped
     */
    public boolean intake()
    {
    	intakeMotor.set(BallIntake.MOTOR_SPEED_INTAKE );
    	return  false;  
    	//-intakeLimitSw.get();
    }
    
    /** 
     * Ejects boulder
     */
    public void eject()
    {
    	intakeMotor.set(BallIntake.MOTOR_SPEED_EJECT );
    }
    
    public void stopIntake()
    {
    	intakeMotor.set(0);
    }
}
