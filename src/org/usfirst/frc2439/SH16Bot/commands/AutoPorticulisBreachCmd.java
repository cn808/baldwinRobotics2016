// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2439.SH16Bot.commands;

import edu.wpi.first.wpilibj.command.CommandGroup;
import org.usfirst.frc2439.SH16Bot.subsystems.*;

/**
 *  An Autonomous Command for breaching the Porticulus defense.
 *  
 *  Match Setup::
 *  	1) Intake Arm in raised position.
 *  	2) Ball inserted in intake for later teleop scoring.
 *  	3) Gate lift arm in lower position, extension retracted.
 * 		4) Robot positioned backwards with front wheel touching line
 * 		   (axle centered on line).
 * 		5) Robot centered on middle of Porticulus.
 * 		6) Robot aligned straight (perpendicular to gate).
 * 
 * 	Command Sequence:
 * 		-  Ball intake arm is lowered, while...
 * 		-  Gate lift arm extension is opened,  while...
 * 		-  Robot drives to Porticulus with lift arm under the gate,
 * 		-  Lift arm is raised, opening gate,
 * 		-  Robot drives quickly under gate and stops in courtyard,
 * 		-  Lift arm extension is retracted, 
 * 		-  Robot spins 180 into position for scoring in teleop.
 */
public class AutoPorticulisBreachCmd extends CommandGroup {


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PARAMETERS
    public AutoPorticulisBreachCmd() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PARAMETERS
        // Add Commands here:
        // e.g. addSequential(new Command1());
        //      addSequential(new Command2());
        // these will run in order.

        // To run multiple commands at the same time,
        // use addParallel()
        // e.g. addParallel(new Command1());
        //      addSequential(new Command2());
        // Command1 and Command2 will run in parallel.

        // A command group will require all of the subsystems that each member
        // would require.
        // e.g. if Command1 requires chassis, and Command2 requires arm,
        // a CommandGroup containing them would require both the chassis and the
        // arm.
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS
        //addSequential(new LowerIntakeCmd());
    	addParallel(new ShiftDownCmd());
        addParallel(new LowerIntakeCmd());
        addParallel(new ExtendGateArmCmd());
        addSequential(new DriveDistanceCmd(-0.7,+2400.));
        addSequential(new RaiseGateCmd());
        addSequential(new DriveDistanceCmd(-1.0, -3500.));
        addSequential(new ResetGateLiftCmd());
        //addSequential(new TurnToAngleCmd(170.));

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS
 
    } 
}
