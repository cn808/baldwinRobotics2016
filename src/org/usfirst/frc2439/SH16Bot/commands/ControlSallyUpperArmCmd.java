// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2439.SH16Bot.commands;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc2439.SH16Bot.Robot;
import org.usfirst.frc2439.SH16Bot.RobotMap;
import edu.wpi.first.wpilibj.Timer;

/**
 *
 */
public class ControlSallyUpperArmCmd extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
	private final int EXTEND=0;
	private final int RETRACT=1;
	private final double ARM_SPEED_UP = 0.6;
	private final double ARM_SPEED_DN = -0.4;
	private final double TIME_LIMIT = 0.5;
	private int m_dir;

    Timer timer;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public ControlSallyUpperArmCmd(int dir) {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        //requires(Robot.sallyArm);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        m_dir = dir;
        timer = new Timer();
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	timer.start();
    	if( m_dir==EXTEND) 
    		RobotMap.sallyArmUpperArmMotor.set(ARM_SPEED_UP);
    	else if( m_dir==RETRACT )
    		RobotMap.sallyArmUpperArmMotor.set(ARM_SPEED_DN);

    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	//RobotMap.sallyArmUpperArmMotor.set( Robot.oi.getLeftJS().getY()/2. );
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished(){
    	return timer.get()>=TIME_LIMIT;   
    }

    // Called once after isFinished returns true
    protected void end() {
    	RobotMap.sallyArmUpperArmMotor.set(0);
    	timer.stop();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	end();
    }
}
