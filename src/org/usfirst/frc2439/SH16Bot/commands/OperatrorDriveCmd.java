// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2439.SH16Bot.commands;

import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.Joystick.AxisType;
import edu.wpi.first.wpilibj.command.Command; 
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc2439.SH16Bot.Robot;
import org.usfirst.frc2439.SH16Bot.RobotMap;

/**
 *
 */
public class OperatrorDriveCmd extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public OperatrorDriveCmd() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	Robot.oi.rightJS.setAxisChannel(AxisType.kTwist,3);    	
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	//RobotMap.driveTrainRobotDrive2.tankDrive( Robot.oi.leftJS.getY(),Robot.oi.rightJS.getY() );
    	// for arcade drive
    	//RobotMap.driveTrainRobotDrive2.arcadeDrive(Robot.oi.getRightJS(),true);
    	
    	double governor = 1.0;
    	if (Robot.driveTrain.inHighGear) governor = 0.67;
    	
    	RobotMap.driveTrainRobotDrive2.arcadeDrive( Robot.oi.getRightJS().getY()*governor,
                									Robot.oi.getRightJS().getTwist()*.75,
                									true);
    	//System.out.println(" Twist axis value = "+Robot.oi.getRightJS().getTwist());
    	/*
    	RobotMap.driveTrainRobotDrive2.arcadeDrive( Robot.oi.getRightJS().getY()*governor,
                									Robot.oi.getRightJS().getTwist()*governor,
                									true);
    	*/
    	int lcount = RobotMap.driveTrainLeftEnc.get();
    	SmartDashboard.putNumber("Left Enc",lcount );
    	int rcount = RobotMap.driveTrainRightEnc.get();
    	SmartDashboard.putNumber("Right Enc",rcount );
    	double ldist = RobotMap.driveTrainLeftEnc.getDistance();
    	double rdist = RobotMap.driveTrainRightEnc.getDistance();
    	//System.out.println( "Encoder dist: L = "+ldist+",  R = "+rdist);
    }
    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
