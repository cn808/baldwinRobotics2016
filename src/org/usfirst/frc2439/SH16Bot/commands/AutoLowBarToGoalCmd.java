// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2439.SH16Bot.commands;

import edu.wpi.first.wpilibj.command.CommandGroup;
import org.usfirst.frc2439.SH16Bot.subsystems.*;

/**
 *  An Autonomous Command for crossing under low bar and scoring
 *  in low goal.
 *  
 *  Match Setup::
 *  	1) Intake Arm in raised position.
 *  	2) Ball inserted in intake for autonomous scoring.
 * 		3) Robot with rear wheel axle centered on line.
 * 		4) Robot centerline towards right side of low bar ramp
 * 		   so that rear of robot does not hit field sidewall
 * 		   when pivoting toward target.  ( Measure starting 
 * 		   distance from sidewall.
 * 		5) Robot aligned straight (perpendicular to ramp).
 * 		6) Select 'Low bar score' button on SmartDSashboard.
 * 
 * 	Command Sequence:
 * 		-  Ball Intake arm lowers, while...
 * 		-  Robot drives under low bar and continues forward fixed distance,
 * 		-  Robot pivots towards left side low goal,
 * 		-  Robot drives fixed distance on to battan ramp and stops,
 * 		-  Robot ejects ball into goal.  SCORE!
 */
public class AutoLowBarToGoalCmd extends CommandGroup {


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PARAMETERS
    public AutoLowBarToGoalCmd() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PARAMETERS
        // Add Commands here:
        // e.g. addSequential(new Command1());
        //      addSequential(new Command2());
        // these will run in order.

        // To run multiple commands at the same time,
        // use addParallel()
        // e.g. addParallel(new Command1());
        //      addSequential(new Command2());
        // Command1 and Command2 will run in parallel.

        // A command group will require all of the subsystems that each member
        // would require.
        // e.g. if Command1 requires chassis, and Command2 requires arm,
        // a CommandGroup containing them would require both the chassis and the
        // arm.
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS
        //addSequential(new LowerIntakeCmd());
    	addSequential(new ShiftDownCmd());
    	addParallel(new LowerIntakeCmd());
        addSequential(new DriveStraightCmd(.95,9000.));
        addSequential(new TurnToAngleCmd(56.));
        //addParallel(new BumpIntakeUpCmd());
        addSequential(new DriveStraightCmd(0.9, 4700.));
        
        addSequential(new AutoEjectBallCmd());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS
 
    } 
}
