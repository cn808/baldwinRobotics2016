// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2439.SH16Bot.commands;

import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc2439.SH16Bot.Robot;

/**
 *
 */
public class DriveStraightCmd extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private double m_speed;
    private double m_dist;
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private double t_speed;
    private static double SPEED_INCR = 0.01;
    private double i_speed;
    private boolean near_end = false;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public DriveStraightCmd(double speed, double dist) {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        m_speed = speed;
        m_dist = dist;

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	Robot.driveTrain.resetEncoders();
    	Robot.navX.zeroGyro();
    	//Robot.navX.driveStraight(-m_speed);
    	i_speed = 0.33*m_speed;
    	Robot.navX.driveStraight(-1.0*i_speed);
    	
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	//Robot.navX.driveStraight(-m_speed);
    	if( !near_end && i_speed<m_speed)  i_speed += SPEED_INCR;
    	Robot.navX.driveStraight(-1.0*i_speed);
    	System.out.println("L Enc = "+Robot.driveTrain.getLeftDist());
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
    	double l_dist = Robot.driveTrain.getLeftDist();
    	if( l_dist>0.95*m_dist )  i_speed = 0.6*m_speed;
    	else if( l_dist> 0.90*m_dist ) i_speed = 0.8*m_speed;
    	if( l_dist>0.90*m_dist )  near_end = true;
    	
    	if( l_dist>=m_dist )  return true;
    	else                  return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    	Robot.driveTrain.drive(0.,0.);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
